import {
  AbstractControl,
  FormGroup,
  ValidationErrors,
  ValidatorFn,
} from '@angular/forms';

import { FieldConfig, NestedArray, ValidatorConfig } from '@ngxui/common';
import { Injectable } from '@angular/core';
import { ngxFormEvaluator } from '@ngxui/eval-form-expr';

@Injectable({
  providedIn: 'root',
})
export class FieldValidatorService {
  /**
   * Constructs a validation error object based on the provided configuration.
   *
   * This method generates an error object that includes a custom error message,
   * the validator name, and a flag indicating whether the error message should
   * be displayed only after form submission.
   *
   * @param {ValidatorConfig} config - An object containing the validation error configuration.
   * @param {string} config.message - The custom error message to display.
   * @param {string} config.name - The name of the validator associated with the error.
   * @param {boolean} config.showMessageAfterSubmit - A flag indicating whether the error message should be displayed only after the form is submitted.
   * @returns {any} A validation error object containing the configured error details.
   */
  getValidatorError({
    message,
    name,
    showMessageAfterSubmit,
  }: ValidatorConfig): any {
    return {
      ngxError: { errorMessage: message, name, showMessageAfterSubmit },
    };
  }

  /**
   * Creates a dynamic validation function based on the provided configuration, validator, and optional parameters.
   *
   * This method returns a `ValidatorFn` that performs validation using the provided validator function.
   * It considers the configuration to enable or disable the validator, applies validation logic, and
   * returns a custom error object if the control is invalid. An optional parameter determines whether
   * additional arguments are passed to the validator.
   *
   * Additional functionality:
   * - Marks the control as touched if a trigger condition is met.
   * - Supports validators that require parameters through the `withParams` flag.
   * - Uses a custom error format generated by `getValidatorError`.
   *
   * @param {any} validator - The validation function to execute (e.g., Angular's `Validators` functions).
   * @param {ValidatorConfig} validatorConfig - The configuration object defining the validator's behavior and metadata.
   * @param {FieldConfig} field - The field configuration to evaluate for enabling/disabling the validator.
   * @param {FormGroup} rootFormGroup - The root form group used for context when checking validation conditions.
   * @param {boolean} withParams - A flag indicating whether the validator function should receive additional parameters.
   * @returns {ValidatorFn} A validator function that processes the control and returns validation errors or `null` if valid.
   */

  nxBaseValidator(
    validator: any,
    validatorConfig: ValidatorConfig,
    field: FieldConfig,
    rootFormGroup: FormGroup,
    withParams?: boolean
  ): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      const isEnabledValidator = this.isValidatorEnabled(
        validatorConfig,
        field,
        rootFormGroup
      );
      if (!isEnabledValidator.isEnabled) {
        return null;
      }
      if (isEnabledValidator.trigger) {
        control.markAsTouched({ emitEvent: false });
      }
      const error = withParams
        ? validator(validatorConfig.value)(control)
        : validator(control);
      if (error) {
        return this.getValidatorError(validatorConfig);
      }
      return null;
    };
  }

  ngxValidator(
    validatorConfig: ValidatorConfig,
    field: FieldConfig,
    rootFormGroup: FormGroup
  ): ValidatorFn {
    /**
     *  Get fields Names dependency
     *  display true => if set field.options.conditional.display
     *  trigger condition => if set
     */
    return (control: AbstractControl): ValidationErrors | null => {
      if (!rootFormGroup || !validatorConfig.value) {
        return null;
      }
      const isEnabledValidator = this.isValidatorEnabled(
        validatorConfig,
        field,
        rootFormGroup
      );
      if (!isEnabledValidator.isEnabled) {
        return null;
      }
      if (isEnabledValidator.trigger) {
        control.markAsTouched({ emitEvent: false });
      }
      return !ngxFormEvaluator(
        rootFormGroup,
        <NestedArray>validatorConfig.value
      )
        ? this.getValidatorError(validatorConfig)
        : null;
    };
  }

  /**
   * Evaluates whether a validator should be enabled based on conditional configurations and trigger conditions.
   *
   * This method checks two conditions to determine if a validator is enabled:
   * 1. If the field has a `conditional.display` configuration and its evaluation is true.
   * 2. If the `validatorConfig.enableCondition` is defined and evaluates to true.
   *
   * The validator is considered enabled if both conditions are true. Additionally, the method
   * returns whether the trigger condition is set, which indicates if the validator requires
   * activation based on other form field values.
   *
   * @param {ValidatorConfig} validatorConfig - The configuration object defining the validator's behavior, including any trigger conditions.
   * @param {FieldConfig} field - The field configuration, which includes conditional display settings that determine if the validator should be active.
   * @param {FormGroup} formGroup - The form group used to evaluate the field's display and trigger conditions.
   * @returns {{isEnabled: boolean, trigger: boolean}} An object indicating whether the validator is enabled (`isEnabled`),
   *          and whether it has trigger conditions set (`trigger`).
   *
   * @remarks
   * - If `field.options.conditional.display` is set, it must evaluate to true for the validator to be enabled.
   * - If `validatorConfig.enableCondition` is set, it must evaluate to true for the validator to be enabled.
   * - The `trigger` flag is `true` if either the `display` or `enableCondition` is defined, indicating that the validator requires activation.
   */
  isValidatorEnabled(
    validatorConfig: ValidatorConfig,
    field: FieldConfig,
    formGroup: FormGroup
  ): { isEnabled: boolean; trigger: boolean } {
    if (!formGroup) {
      return { isEnabled: true, trigger: false };
    }
    const displayConfig = field.options?.conditional?.display;
    const enableCondition = validatorConfig?.enableCondition;
    let isEnabled = true;
    if (displayConfig?.length) {
      isEnabled = ngxFormEvaluator(formGroup, displayConfig);
    }
    if (enableCondition?.length) {
      isEnabled = isEnabled && ngxFormEvaluator(formGroup, enableCondition);
    }
    return {
      isEnabled,
      trigger: !!displayConfig?.length || !!enableCondition?.length,
    };
  }
}







